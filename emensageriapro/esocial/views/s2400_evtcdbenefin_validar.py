#coding:utf-8
"""

    eMensageriaPro - Sistema de Gerenciamento de Eventos<www.emensageria.com.br>
    Copyright (C) 2018  Marcelo Medeiros de Vasconcellos

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

        Este programa é distribuído na esperança de que seja útil,
        mas SEM QUALQUER GARANTIA; sem mesmo a garantia implícita de
        COMERCIABILIDADE OU ADEQUAÇÃO A UM DETERMINADO FIM. Veja o
        Licença Pública Geral GNU Affero para mais detalhes.

        Este programa é software livre: você pode redistribuí-lo e / ou modificar
        sob os termos da licença GNU Affero General Public License como
        publicado pela Free Software Foundation, seja versão 3 do
        Licença, ou (a seu critério) qualquer versão posterior.

        Você deveria ter recebido uma cópia da Licença Pública Geral GNU Affero
        junto com este programa. Se não, veja <https://www.gnu.org/licenses/>.

"""
import xmltodict
import pprint
import json
import psycopg2
from emensageriapro.padrao import ler_arquivo


def validacoes_s2400_evtcdbenefin(arquivo):
    from emensageriapro.funcoes_validacoes import validar_campo
    import untangle
    xml = ler_arquivo(arquivo).replace("s:", "")
    doc = untangle.parse(xml)
    validacoes_lista = []
    xmlns = doc.eSocial['xmlns'].split('/')
    evtCdBenefIn = doc.eSocial.evtCdBenefIn

    if 'indRetif' in dir(evtCdBenefIn.ideEvento): validacoes_lista = validar_campo(validacoes_lista,'evtCdBenefIn.ideEvento.indRetif', evtCdBenefIn.ideEvento.indRetif.cdata, 1, '1;2')
    if 'nrRecibo' in dir(evtCdBenefIn.ideEvento): validacoes_lista = validar_campo(validacoes_lista,'evtCdBenefIn.ideEvento.nrRecibo', evtCdBenefIn.ideEvento.nrRecibo.cdata, 0, '')
    if 'tpAmb' in dir(evtCdBenefIn.ideEvento): validacoes_lista = validar_campo(validacoes_lista,'evtCdBenefIn.ideEvento.tpAmb', evtCdBenefIn.ideEvento.tpAmb.cdata, 1, '1;2')
    if 'procEmi' in dir(evtCdBenefIn.ideEvento): validacoes_lista = validar_campo(validacoes_lista,'evtCdBenefIn.ideEvento.procEmi', evtCdBenefIn.ideEvento.procEmi.cdata, 1, '1;2;3;4;5')
    if 'verProc' in dir(evtCdBenefIn.ideEvento): validacoes_lista = validar_campo(validacoes_lista,'evtCdBenefIn.ideEvento.verProc', evtCdBenefIn.ideEvento.verProc.cdata, 1, '')
    if 'tpInsc' in dir(evtCdBenefIn.ideEmpregador): validacoes_lista = validar_campo(validacoes_lista,'evtCdBenefIn.ideEmpregador.tpInsc', evtCdBenefIn.ideEmpregador.tpInsc.cdata, 1, '1')
    if 'nrInsc' in dir(evtCdBenefIn.ideEmpregador): validacoes_lista = validar_campo(validacoes_lista,'evtCdBenefIn.ideEmpregador.nrInsc', evtCdBenefIn.ideEmpregador.nrInsc.cdata, 1, '')
    if 'cpfBenef' in dir(evtCdBenefIn.beneficiario): validacoes_lista = validar_campo(validacoes_lista,'evtCdBenefIn.beneficiario.cpfBenef', evtCdBenefIn.beneficiario.cpfBenef.cdata, 1, '')
    if 'nisBenef' in dir(evtCdBenefIn.beneficiario): validacoes_lista = validar_campo(validacoes_lista,'evtCdBenefIn.beneficiario.nisBenef', evtCdBenefIn.beneficiario.nisBenef.cdata, 0, '')
    if 'nmBenefic' in dir(evtCdBenefIn.beneficiario): validacoes_lista = validar_campo(validacoes_lista,'evtCdBenefIn.beneficiario.nmBenefic', evtCdBenefIn.beneficiario.nmBenefic.cdata, 1, '')
    if 'dtInicio' in dir(evtCdBenefIn.beneficiario): validacoes_lista = validar_campo(validacoes_lista,'evtCdBenefIn.beneficiario.dtInicio', evtCdBenefIn.beneficiario.dtInicio.cdata, 1, '')
    if 'sexo' in dir(evtCdBenefIn.beneficiario): validacoes_lista = validar_campo(validacoes_lista,'evtCdBenefIn.beneficiario.sexo', evtCdBenefIn.beneficiario.sexo.cdata, 1, 'M;F')
    if 'racaCor' in dir(evtCdBenefIn.beneficiario): validacoes_lista = validar_campo(validacoes_lista,'evtCdBenefIn.beneficiario.racaCor', evtCdBenefIn.beneficiario.racaCor.cdata, 1, '1;2;3;4;5;6')
    if 'estCiv' in dir(evtCdBenefIn.beneficiario): validacoes_lista = validar_campo(validacoes_lista,'evtCdBenefIn.beneficiario.estCiv', evtCdBenefIn.beneficiario.estCiv.cdata, 0, '1;2;3;4;5')
    if 'incFisMen' in dir(evtCdBenefIn.beneficiario): validacoes_lista = validar_campo(validacoes_lista,'evtCdBenefIn.beneficiario.incFisMen', evtCdBenefIn.beneficiario.incFisMen.cdata, 1, 'S;N')
    if 'dtIncFisMen' in dir(evtCdBenefIn.beneficiario): validacoes_lista = validar_campo(validacoes_lista,'evtCdBenefIn.beneficiario.dtIncFisMen', evtCdBenefIn.beneficiario.dtIncFisMen.cdata, 0, '')
    if 'dtNascto' in dir(evtCdBenefIn.beneficiario.dadosNasc): validacoes_lista = validar_campo(validacoes_lista,'evtCdBenefIn.beneficiario.dadosNasc.dtNascto', evtCdBenefIn.beneficiario.dadosNasc.dtNascto.cdata, 1, '')
    if 'codMunic' in dir(evtCdBenefIn.beneficiario.dadosNasc): validacoes_lista = validar_campo(validacoes_lista,'evtCdBenefIn.beneficiario.dadosNasc.codMunic', evtCdBenefIn.beneficiario.dadosNasc.codMunic.cdata, 0, '')
    if 'uf' in dir(evtCdBenefIn.beneficiario.dadosNasc): validacoes_lista = validar_campo(validacoes_lista,'evtCdBenefIn.beneficiario.dadosNasc.uf', evtCdBenefIn.beneficiario.dadosNasc.uf.cdata, 0, '')
    if 'paisNascto' in dir(evtCdBenefIn.beneficiario.dadosNasc): validacoes_lista = validar_campo(validacoes_lista,'evtCdBenefIn.beneficiario.dadosNasc.paisNascto', evtCdBenefIn.beneficiario.dadosNasc.paisNascto.cdata, 0, '008 - Abu Dhabi;040 - Angola;329 - Guine;331 - Guine-Equatorial;334 - Guine-Bissau;337 - Guiana;341 - Haiti;345 - Honduras;351 - Hong Kong;355 - Hungria, Republica Da;357 - Iemen;358 - Iemem Do Sul;041 - Anguilla;359 - Man, Ilha De;361 - India;365 - Indonesia;367 - Inglaterra;369 - Iraque;372 - Ira, Republica Islamica Do;375 - Irlanda;379 - Islandia;383 - Israel;386 - Italia;043 - Antigua E Barbuda;388 - Servia E Montenegro;391 - Jamaica;395 - Jammu;396 - Johnston, Ilhas;399 - Japao;403 - Jordania;411 - Kiribati;420 - Laos, Rep.Pop.Democr.Do;423 - Lebuan,Ilhas;426 - Lesoto;047 - Antilhas Holandesas;427 - Letonia, Republica Da;431 - Libano;434 - Liberia;438 - Libia;440 - Liechtenstein;442 - Lituania, Republica Da;445 - Luxemburgo;447 - Macau;449 - Macedonia, Ant.Rep.Iugoslava;450 - Madagascar;053 - Arabia Saudita;452 - Ilha Da Madeira;455 - Malasia;458 - Malavi;461 - Maldivas;464 - Mali;467 - Malta;472 - Marianas Do Norte;474 - Marrocos;476 - Marshall,Ilhas;477 - Martinica;059 - Argelia;485 - Mauricio;488 - Mauritania;490 - Midway, Ilhas;493 - Mexico;494 - Moldavia, Republica Da;495 - Monaco;497 - Mongolia;499 - Micronesia;501 - Montserrat,Ilhas;505 - Mocambique;063 - Argentina;507 - Namibia;508 - Nauru;511 - Christmas,Ilha (NAVIDAD);517 - Nepal;521 - Nicaragua;525 - Niger;528 - Nigeria;531 - Niue,Ilha;535 - Norfolk,Ilha;538 - Noruega;064 - Armenia, Republica Da;542 - Nova Caledonia;545 - Papua Nova Guine;548 - Nova Zelandia;551 - Vanuatu;556 - Oma;563 - Pacifico,Ilhas Do (ADMINISTRACAO Dos Eua);566 - Pacifico,Ilhas Do (POSSESSAO Dos Eua);569 - Pacifico,Ilhas Do (TERRITORIO Em Fideicomisso Dos;573 - Paises Baixos (HOLANDA);575 - Palau;065 - Aruba;576 - Paquistao;578 - Palestina;580 - Panama;583 - Papua Nova Guiné;586 - Paraguai;589 - Peru;593 - Pitcairn,Ilha;599 - Polinesia Francesa;603 - Polonia, Republica Da;607 - Portugal;069 - Australia;611 - Porto Rico;623 - Quenia;625 - Quirguiz, Republica;628 - Reino Unido;640 - Republica Centro-Africana;647 - Republica Dominicana;660 - Reuniao, Ilha;665 - Zimbabue;670 - Romenia;675 - Ruanda;009 - Dirce;072 - Austria;676 - Russia, Federacao Da;677 - Salomao, Ilhas;678 - Saint Kitts E Nevis;685 - Saara Ocidental;687 - El Salvador;690 - Samoa;691 - Samoa Americana;695 - Sao Cristovao E Neves,Ilhas;697 - San Marino;700 - Sao Pedro E Miquelon;073 - Azerbaijao, Republica Do;705 - Sao Vicente E Granadinas;710 - Santa Helena;715 - Santa Lucia;720 - Sao Tome E Principe, Ilhas;728 - Senegal;731 - Seychelles;735 - Serra Leoa;738 - Sikkim;741 - Cingapura;744 - Siria, Republica Arabe Da;077 - Bahamas, Ilhas;748 - Somalia;750 - Sri Lanka;754 - Suazilandia;756 - Africa Do Sul;759 - Sudao;764 - Suecia;767 - Suica;770 - Suriname;772 - Tadjiquistao, Republica Do;776 - Tailandia;080 - Bahrein, Ilhas;780 - Tanzania, Rep.Unida Da;782 - Territorio Brit.Oc.Indico;783 - Djibuti;785 - Territorio da Alta Comissao do Pacifico Ocidental;788 - Chade;790 - Tchecoslovaquia;791 - Tcheca, Republica;795 - Timor Leste;800 - Togo;805 - Toquelau,Ilhas;081 - Bangladesh;810 - Tonga;815 - Trinidad E Tobago;820 - Tunisia;823 - Turcas E Caicos,Ilhas;824 - Turcomenistao, Republica Do;827 - Turquia;828 - Tuvalu;831 - Ucrania;833 - Uganda;840 - Uniao Das Republicas Socialistas Sovieticas;083 - Barbados;845 - Uruguai;847 - Uzbequistao, Republica Do;848 - Vaticano, Est.Da Cidade Do;850 - Venezuela;855 - Vietname Norte;858 - Vietna;863 - Virgens,Ilhas (BRITANICAS);866 - Virgens,Ilhas (E.U.A);870 - Fiji;873 - Wake, Ilha;085 - Belarus, Republica Da;875 - Wallis E Futuna, Ilhas;888 - Congo, Republica Democratica Do;890 - Zambia;087 - Belgica;088 - Belize;090 - Bermudas;013 - Afeganistao;093 - Mianmar (BIRMANIA);097 - Bolivia, Estado Plurinacional Da;098 - Bosnia-Herzegovina (REPUBLICA Da);100 - Int.Z.F.Manaus;101 - Botsuana;105 - Brasil;106 - Fretado P/Brasil;108 - Brunei;111 - Bulgaria, Republica Da;115 - Burundi;017 - Albania, Republica Da;119 - Butao;127 - Cabo Verde, Republica De;131 - Cachemira;137 - Cayman, Ilhas;141 - Camboja;145 - Camaroes;149 - Canada;150 - Jersey, Ilha Do Canal;151 - Canarias, Ilhas;152 - Canal,Ilhas;020 - Alboran-Perejil,Ilhas;153 - Cazaquistao, Republica Do;154 - Catar;158 - Chile;160 - China, Republica Popular;161 - Formosa (TAIWAN);163 - Chipre;165 - Cocos(Keeling),Ilhas;169 - Colombia;173 - Comores, Ilhas;177 - Congo;023 - Alemanha;183 - Cook, Ilhas;187 - Coreia (DO Norte), Rep.Pop.Democratica;190 - Coreia (DO Sul), Republica Da;193 - Costa Do Marfim;195 - Croacia (REPUBLICA Da);196 - Costa Rica;198 - Coveite;199 - Cuba;229 - Benin;232 - Dinamarca;025 - Alemanha, Republica Democratica;235 - Dominica,Ilha;237 - Dubai;239 - Equador;240 - Egito;243 - Eritreia;244 - Emirados Arabes Unidos;245 - Espanha;246 - Eslovenia, Republica Da;247 - Eslovaca, Republica;249 - Estados Unidos;031 - Burkina Faso;251 - Estonia, Republica Da;253 - Etiopia;255 - Falkland (ILHAS Malvinas);259 - Feroe, Ilhas;263 - Fezzan;267 - Filipinas;271 - Finlandia;275 - Franca;281 - Gabao;285 - Gambia;037 - Andorra;289 - Gana;291 - Georgia, Republica Da;293 - Gibraltar;297 - Granada;301 - Grecia;305 - Groenlandia;309 - Guadalupe;313 - Guam;317 - Guatemala;325 - Guiana Francesa')
    if 'paisNac' in dir(evtCdBenefIn.beneficiario.dadosNasc): validacoes_lista = validar_campo(validacoes_lista,'evtCdBenefIn.beneficiario.dadosNasc.paisNac', evtCdBenefIn.beneficiario.dadosNasc.paisNac.cdata, 1, '008 - Abu Dhabi;040 - Angola;329 - Guine;331 - Guine-Equatorial;334 - Guine-Bissau;337 - Guiana;341 - Haiti;345 - Honduras;351 - Hong Kong;355 - Hungria, Republica Da;357 - Iemen;358 - Iemem Do Sul;041 - Anguilla;359 - Man, Ilha De;361 - India;365 - Indonesia;367 - Inglaterra;369 - Iraque;372 - Ira, Republica Islamica Do;375 - Irlanda;379 - Islandia;383 - Israel;386 - Italia;043 - Antigua E Barbuda;388 - Servia E Montenegro;391 - Jamaica;395 - Jammu;396 - Johnston, Ilhas;399 - Japao;403 - Jordania;411 - Kiribati;420 - Laos, Rep.Pop.Democr.Do;423 - Lebuan,Ilhas;426 - Lesoto;047 - Antilhas Holandesas;427 - Letonia, Republica Da;431 - Libano;434 - Liberia;438 - Libia;440 - Liechtenstein;442 - Lituania, Republica Da;445 - Luxemburgo;447 - Macau;449 - Macedonia, Ant.Rep.Iugoslava;450 - Madagascar;053 - Arabia Saudita;452 - Ilha Da Madeira;455 - Malasia;458 - Malavi;461 - Maldivas;464 - Mali;467 - Malta;472 - Marianas Do Norte;474 - Marrocos;476 - Marshall,Ilhas;477 - Martinica;059 - Argelia;485 - Mauricio;488 - Mauritania;490 - Midway, Ilhas;493 - Mexico;494 - Moldavia, Republica Da;495 - Monaco;497 - Mongolia;499 - Micronesia;501 - Montserrat,Ilhas;505 - Mocambique;063 - Argentina;507 - Namibia;508 - Nauru;511 - Christmas,Ilha (NAVIDAD);517 - Nepal;521 - Nicaragua;525 - Niger;528 - Nigeria;531 - Niue,Ilha;535 - Norfolk,Ilha;538 - Noruega;064 - Armenia, Republica Da;542 - Nova Caledonia;545 - Papua Nova Guine;548 - Nova Zelandia;551 - Vanuatu;556 - Oma;563 - Pacifico,Ilhas Do (ADMINISTRACAO Dos Eua);566 - Pacifico,Ilhas Do (POSSESSAO Dos Eua);569 - Pacifico,Ilhas Do (TERRITORIO Em Fideicomisso Dos;573 - Paises Baixos (HOLANDA);575 - Palau;065 - Aruba;576 - Paquistao;578 - Palestina;580 - Panama;583 - Papua Nova Guiné;586 - Paraguai;589 - Peru;593 - Pitcairn,Ilha;599 - Polinesia Francesa;603 - Polonia, Republica Da;607 - Portugal;069 - Australia;611 - Porto Rico;623 - Quenia;625 - Quirguiz, Republica;628 - Reino Unido;640 - Republica Centro-Africana;647 - Republica Dominicana;660 - Reuniao, Ilha;665 - Zimbabue;670 - Romenia;675 - Ruanda;009 - Dirce;072 - Austria;676 - Russia, Federacao Da;677 - Salomao, Ilhas;678 - Saint Kitts E Nevis;685 - Saara Ocidental;687 - El Salvador;690 - Samoa;691 - Samoa Americana;695 - Sao Cristovao E Neves,Ilhas;697 - San Marino;700 - Sao Pedro E Miquelon;073 - Azerbaijao, Republica Do;705 - Sao Vicente E Granadinas;710 - Santa Helena;715 - Santa Lucia;720 - Sao Tome E Principe, Ilhas;728 - Senegal;731 - Seychelles;735 - Serra Leoa;738 - Sikkim;741 - Cingapura;744 - Siria, Republica Arabe Da;077 - Bahamas, Ilhas;748 - Somalia;750 - Sri Lanka;754 - Suazilandia;756 - Africa Do Sul;759 - Sudao;764 - Suecia;767 - Suica;770 - Suriname;772 - Tadjiquistao, Republica Do;776 - Tailandia;080 - Bahrein, Ilhas;780 - Tanzania, Rep.Unida Da;782 - Territorio Brit.Oc.Indico;783 - Djibuti;785 - Territorio da Alta Comissao do Pacifico Ocidental;788 - Chade;790 - Tchecoslovaquia;791 - Tcheca, Republica;795 - Timor Leste;800 - Togo;805 - Toquelau,Ilhas;081 - Bangladesh;810 - Tonga;815 - Trinidad E Tobago;820 - Tunisia;823 - Turcas E Caicos,Ilhas;824 - Turcomenistao, Republica Do;827 - Turquia;828 - Tuvalu;831 - Ucrania;833 - Uganda;840 - Uniao Das Republicas Socialistas Sovieticas;083 - Barbados;845 - Uruguai;847 - Uzbequistao, Republica Do;848 - Vaticano, Est.Da Cidade Do;850 - Venezuela;855 - Vietname Norte;858 - Vietna;863 - Virgens,Ilhas (BRITANICAS);866 - Virgens,Ilhas (E.U.A);870 - Fiji;873 - Wake, Ilha;085 - Belarus, Republica Da;875 - Wallis E Futuna, Ilhas;888 - Congo, Republica Democratica Do;890 - Zambia;087 - Belgica;088 - Belize;090 - Bermudas;013 - Afeganistao;093 - Mianmar (BIRMANIA);097 - Bolivia, Estado Plurinacional Da;098 - Bosnia-Herzegovina (REPUBLICA Da);100 - Int.Z.F.Manaus;101 - Botsuana;105 - Brasil;106 - Fretado P/Brasil;108 - Brunei;111 - Bulgaria, Republica Da;115 - Burundi;017 - Albania, Republica Da;119 - Butao;127 - Cabo Verde, Republica De;131 - Cachemira;137 - Cayman, Ilhas;141 - Camboja;145 - Camaroes;149 - Canada;150 - Jersey, Ilha Do Canal;151 - Canarias, Ilhas;152 - Canal,Ilhas;020 - Alboran-Perejil,Ilhas;153 - Cazaquistao, Republica Do;154 - Catar;158 - Chile;160 - China, Republica Popular;161 - Formosa (TAIWAN);163 - Chipre;165 - Cocos(Keeling),Ilhas;169 - Colombia;173 - Comores, Ilhas;177 - Congo;023 - Alemanha;183 - Cook, Ilhas;187 - Coreia (DO Norte), Rep.Pop.Democratica;190 - Coreia (DO Sul), Republica Da;193 - Costa Do Marfim;195 - Croacia (REPUBLICA Da);196 - Costa Rica;198 - Coveite;199 - Cuba;229 - Benin;232 - Dinamarca;025 - Alemanha, Republica Democratica;235 - Dominica,Ilha;237 - Dubai;239 - Equador;240 - Egito;243 - Eritreia;244 - Emirados Arabes Unidos;245 - Espanha;246 - Eslovenia, Republica Da;247 - Eslovaca, Republica;249 - Estados Unidos;031 - Burkina Faso;251 - Estonia, Republica Da;253 - Etiopia;255 - Falkland (ILHAS Malvinas);259 - Feroe, Ilhas;263 - Fezzan;267 - Filipinas;271 - Finlandia;275 - Franca;281 - Gabao;285 - Gambia;037 - Andorra;289 - Gana;291 - Georgia, Republica Da;293 - Gibraltar;297 - Granada;301 - Grecia;305 - Groenlandia;309 - Guadalupe;313 - Guam;317 - Guatemala;325 - Guiana Francesa')
    if 'nmMae' in dir(evtCdBenefIn.beneficiario.dadosNasc): validacoes_lista = validar_campo(validacoes_lista,'evtCdBenefIn.beneficiario.dadosNasc.nmMae', evtCdBenefIn.beneficiario.dadosNasc.nmMae.cdata, 0, '')
    if 'nmPai' in dir(evtCdBenefIn.beneficiario.dadosNasc): validacoes_lista = validar_campo(validacoes_lista,'evtCdBenefIn.beneficiario.dadosNasc.nmPai', evtCdBenefIn.beneficiario.dadosNasc.nmPai.cdata, 0, '')
    if 'endereco' in dir(evtCdBenefIn.beneficiario):
        for endereco in evtCdBenefIn.beneficiario.endereco:
       

            if 'brasil' in dir(endereco):
                for brasil in endereco.brasil:
               
                    if 'tpLograd' in dir(brasil): validacoes_lista = validar_campo(validacoes_lista,'brasil.tpLograd', brasil.tpLograd.cdata, 1, 'A - Área;AC - Acesso;ACA - Acampamento;ACL - Acesso Local;AD - Adro;AE - Área Especial;AER - Aeroporto;AL - Alameda;AMD - Avenida Marginal Direita;AME - Avenida Marginal Esquerda;AN - Anel Viário;ANT - Antiga Estrada;ART - Artéria;AT - Alto;ATL - Atalho;A V - Área Verde;AV - Avenida;AVC - Avenida Contorno;AVM - Avenida Marginal;AVV - Avenida Velha;BAL - Balneário;BC - Beco;BCO - Buraco;BEL - Belvedere;BL - Bloco;BLO - Balão;BLS - Blocos;BLV - Bulevar;BSQ - Bosque;BVD - Boulevard;BX - Baixa;C - Cais;CAL - Calçada;CAM - Caminho;CAN - Canal;CH - Chácara;CHA - Chapadão;CIC - Ciclovia;CIR - Circular;CJ - Conjunto;CJM - Conjunto Mutirão;CMP - Complexo Viário;COL - Colônia;COM - Comunidade;CON - Condomínio;COR - Corredor;CPO - Campo;CRG - Córrego;CTN - Contorno;DSC - Descida;DSV - Desvio;DT - Distrito;EB - Entre Bloco;EIM - Estrada Intermunicipal;ENS - Enseada;ENT - Entrada Particular;EQ - Entre Quadra;ESC - Escada;ESD - Escadaria;ESE - Estrada Estadual;ESI - Estrada Vicinal;ESL - Estrada de Ligação;ESM - Estrada Municipal;ESP - Esplanada;ESS - Estrada de Servidão;EST - Estrada;ESV - Estrada Velha;ETA - Estrada Antiga;ETC - Estação;ETD - Estádio;ETN - Estância;ETP - Estrada Particular;ETT - Estacionamento;EVA - Evangélica;EVD - Elevada;EX - Eixo Industrial;FAV - Favela;FAZ - Fazenda;FER - Ferrovia;FNT - Fonte;FRA - Feira;FTE - Forte;GAL - Galeria;GJA - Granja;HAB - Núcleo Habitacional;IA - Ilha;IND - Indeterminado;IOA - Ilhota;JD - Jardim;JDE - Jardinete;LD - Ladeira;LGA - Lagoa;LGO - Lago;LOT - Loteamento;LRG - Largo;LT - Lote;MER - Mercado;MNA - Marina;MOD - Modulo;MRG - Projeção;MRO - Morro;MTE - Monte;NUC - Núcleo;NUR - Núcleo Rural;OUT - Outeiro;PAR - Paralela;PAS - Passeio;PAT - Pátio;PC - Praça;PCE - Praça de Esportes;PDA - Parada;PDO - Paradouro;PNT - Ponta;PR - Praia;PRL - Prolongamento;PRM - Parque Municipal;PRQ - Parque;PRR - Parque Residencial;PSA - Passarela;PSG - Passagem;PSP - Passagem de Pedestre;PSS - Passagem Subterrânea;PTE - Ponte;PTO - Porto;Q - Quadra;QTA - Quinta;QTS - Quintas;R - Rua;R I - Rua Integração;R L - Rua de Ligação;R P - Rua Particular;R V - Rua Velha;RAM - Ramal;RCR - Recreio;REC - Recanto;RER - Retiro;RES - Residencial;RET - Reta;RLA - Ruela;RMP - Rampa;ROA - Rodo Anel;ROD - Rodovia;ROT - Rotula;RPE - Rua de Pedestre;RPR - Margem;RTN - Retorno;RTT - Rotatória;SEG - Segunda Avenida;SIT - Sitio;SRV - Servidão;ST - Setor;SUB - Subida;TCH - Trincheira;TER - Terminal;TR - Trecho;TRV - Trevo;TUN - Túnel;TV - Travessa;TVP - Travessa Particular;TVV - Travessa Velha;UNI - Unidade;V - Via;V C - Via Coletora;V L - Via Local;VAC - Via de Acesso;VAL - Vala;VCO - Via Costeira;VD - Viaduto;V-E - Via Expressa;VER - Vereda;VEV - Via Elevado;VL - Vila;VLA - Viela;VLE - Vale;VLT - Via Litorânea;VPE - Via de Pedestre;VRT - Variante;ZIG - Zigue-Zague')
                    if 'dscLograd' in dir(brasil): validacoes_lista = validar_campo(validacoes_lista,'brasil.dscLograd', brasil.dscLograd.cdata, 1, '')
                    if 'nrLograd' in dir(brasil): validacoes_lista = validar_campo(validacoes_lista,'brasil.nrLograd', brasil.nrLograd.cdata, 1, '')
                    if 'complemento' in dir(brasil): validacoes_lista = validar_campo(validacoes_lista,'brasil.complemento', brasil.complemento.cdata, 0, '')
                    if 'bairro' in dir(brasil): validacoes_lista = validar_campo(validacoes_lista,'brasil.bairro', brasil.bairro.cdata, 0, '')
                    if 'cep' in dir(brasil): validacoes_lista = validar_campo(validacoes_lista,'brasil.cep', brasil.cep.cdata, 1, '')
                    if 'codMunic' in dir(brasil): validacoes_lista = validar_campo(validacoes_lista,'brasil.codMunic', brasil.codMunic.cdata, 1, '')
                    if 'uf' in dir(brasil): validacoes_lista = validar_campo(validacoes_lista,'brasil.uf', brasil.uf.cdata, 1, '')
   
            if 'exterior' in dir(endereco):
                for exterior in endereco.exterior:
               
                    if 'paisResid' in dir(exterior): validacoes_lista = validar_campo(validacoes_lista,'exterior.paisResid', exterior.paisResid.cdata, 1, '008 - Abu Dhabi;040 - Angola;329 - Guine;331 - Guine-Equatorial;334 - Guine-Bissau;337 - Guiana;341 - Haiti;345 - Honduras;351 - Hong Kong;355 - Hungria, Republica Da;357 - Iemen;358 - Iemem Do Sul;041 - Anguilla;359 - Man, Ilha De;361 - India;365 - Indonesia;367 - Inglaterra;369 - Iraque;372 - Ira, Republica Islamica Do;375 - Irlanda;379 - Islandia;383 - Israel;386 - Italia;043 - Antigua E Barbuda;388 - Servia E Montenegro;391 - Jamaica;395 - Jammu;396 - Johnston, Ilhas;399 - Japao;403 - Jordania;411 - Kiribati;420 - Laos, Rep.Pop.Democr.Do;423 - Lebuan,Ilhas;426 - Lesoto;047 - Antilhas Holandesas;427 - Letonia, Republica Da;431 - Libano;434 - Liberia;438 - Libia;440 - Liechtenstein;442 - Lituania, Republica Da;445 - Luxemburgo;447 - Macau;449 - Macedonia, Ant.Rep.Iugoslava;450 - Madagascar;053 - Arabia Saudita;452 - Ilha Da Madeira;455 - Malasia;458 - Malavi;461 - Maldivas;464 - Mali;467 - Malta;472 - Marianas Do Norte;474 - Marrocos;476 - Marshall,Ilhas;477 - Martinica;059 - Argelia;485 - Mauricio;488 - Mauritania;490 - Midway, Ilhas;493 - Mexico;494 - Moldavia, Republica Da;495 - Monaco;497 - Mongolia;499 - Micronesia;501 - Montserrat,Ilhas;505 - Mocambique;063 - Argentina;507 - Namibia;508 - Nauru;511 - Christmas,Ilha (NAVIDAD);517 - Nepal;521 - Nicaragua;525 - Niger;528 - Nigeria;531 - Niue,Ilha;535 - Norfolk,Ilha;538 - Noruega;064 - Armenia, Republica Da;542 - Nova Caledonia;545 - Papua Nova Guine;548 - Nova Zelandia;551 - Vanuatu;556 - Oma;563 - Pacifico,Ilhas Do (ADMINISTRACAO Dos Eua);566 - Pacifico,Ilhas Do (POSSESSAO Dos Eua);569 - Pacifico,Ilhas Do (TERRITORIO Em Fideicomisso Dos;573 - Paises Baixos (HOLANDA);575 - Palau;065 - Aruba;576 - Paquistao;578 - Palestina;580 - Panama;583 - Papua Nova Guiné;586 - Paraguai;589 - Peru;593 - Pitcairn,Ilha;599 - Polinesia Francesa;603 - Polonia, Republica Da;607 - Portugal;069 - Australia;611 - Porto Rico;623 - Quenia;625 - Quirguiz, Republica;628 - Reino Unido;640 - Republica Centro-Africana;647 - Republica Dominicana;660 - Reuniao, Ilha;665 - Zimbabue;670 - Romenia;675 - Ruanda;009 - Dirce;072 - Austria;676 - Russia, Federacao Da;677 - Salomao, Ilhas;678 - Saint Kitts E Nevis;685 - Saara Ocidental;687 - El Salvador;690 - Samoa;691 - Samoa Americana;695 - Sao Cristovao E Neves,Ilhas;697 - San Marino;700 - Sao Pedro E Miquelon;073 - Azerbaijao, Republica Do;705 - Sao Vicente E Granadinas;710 - Santa Helena;715 - Santa Lucia;720 - Sao Tome E Principe, Ilhas;728 - Senegal;731 - Seychelles;735 - Serra Leoa;738 - Sikkim;741 - Cingapura;744 - Siria, Republica Arabe Da;077 - Bahamas, Ilhas;748 - Somalia;750 - Sri Lanka;754 - Suazilandia;756 - Africa Do Sul;759 - Sudao;764 - Suecia;767 - Suica;770 - Suriname;772 - Tadjiquistao, Republica Do;776 - Tailandia;080 - Bahrein, Ilhas;780 - Tanzania, Rep.Unida Da;782 - Territorio Brit.Oc.Indico;783 - Djibuti;785 - Territorio da Alta Comissao do Pacifico Ocidental;788 - Chade;790 - Tchecoslovaquia;791 - Tcheca, Republica;795 - Timor Leste;800 - Togo;805 - Toquelau,Ilhas;081 - Bangladesh;810 - Tonga;815 - Trinidad E Tobago;820 - Tunisia;823 - Turcas E Caicos,Ilhas;824 - Turcomenistao, Republica Do;827 - Turquia;828 - Tuvalu;831 - Ucrania;833 - Uganda;840 - Uniao Das Republicas Socialistas Sovieticas;083 - Barbados;845 - Uruguai;847 - Uzbequistao, Republica Do;848 - Vaticano, Est.Da Cidade Do;850 - Venezuela;855 - Vietname Norte;858 - Vietna;863 - Virgens,Ilhas (BRITANICAS);866 - Virgens,Ilhas (E.U.A);870 - Fiji;873 - Wake, Ilha;085 - Belarus, Republica Da;875 - Wallis E Futuna, Ilhas;888 - Congo, Republica Democratica Do;890 - Zambia;087 - Belgica;088 - Belize;090 - Bermudas;013 - Afeganistao;093 - Mianmar (BIRMANIA);097 - Bolivia, Estado Plurinacional Da;098 - Bosnia-Herzegovina (REPUBLICA Da);100 - Int.Z.F.Manaus;101 - Botsuana;105 - Brasil;106 - Fretado P/Brasil;108 - Brunei;111 - Bulgaria, Republica Da;115 - Burundi;017 - Albania, Republica Da;119 - Butao;127 - Cabo Verde, Republica De;131 - Cachemira;137 - Cayman, Ilhas;141 - Camboja;145 - Camaroes;149 - Canada;150 - Jersey, Ilha Do Canal;151 - Canarias, Ilhas;152 - Canal,Ilhas;020 - Alboran-Perejil,Ilhas;153 - Cazaquistao, Republica Do;154 - Catar;158 - Chile;160 - China, Republica Popular;161 - Formosa (TAIWAN);163 - Chipre;165 - Cocos(Keeling),Ilhas;169 - Colombia;173 - Comores, Ilhas;177 - Congo;023 - Alemanha;183 - Cook, Ilhas;187 - Coreia (DO Norte), Rep.Pop.Democratica;190 - Coreia (DO Sul), Republica Da;193 - Costa Do Marfim;195 - Croacia (REPUBLICA Da);196 - Costa Rica;198 - Coveite;199 - Cuba;229 - Benin;232 - Dinamarca;025 - Alemanha, Republica Democratica;235 - Dominica,Ilha;237 - Dubai;239 - Equador;240 - Egito;243 - Eritreia;244 - Emirados Arabes Unidos;245 - Espanha;246 - Eslovenia, Republica Da;247 - Eslovaca, Republica;249 - Estados Unidos;031 - Burkina Faso;251 - Estonia, Republica Da;253 - Etiopia;255 - Falkland (ILHAS Malvinas);259 - Feroe, Ilhas;263 - Fezzan;267 - Filipinas;271 - Finlandia;275 - Franca;281 - Gabao;285 - Gambia;037 - Andorra;289 - Gana;291 - Georgia, Republica Da;293 - Gibraltar;297 - Granada;301 - Grecia;305 - Groenlandia;309 - Guadalupe;313 - Guam;317 - Guatemala;325 - Guiana Francesa')
                    if 'dscLograd' in dir(exterior): validacoes_lista = validar_campo(validacoes_lista,'exterior.dscLograd', exterior.dscLograd.cdata, 1, '')
                    if 'nrLograd' in dir(exterior): validacoes_lista = validar_campo(validacoes_lista,'exterior.nrLograd', exterior.nrLograd.cdata, 1, '')
                    if 'complemento' in dir(exterior): validacoes_lista = validar_campo(validacoes_lista,'exterior.complemento', exterior.complemento.cdata, 0, '')
                    if 'bairro' in dir(exterior): validacoes_lista = validar_campo(validacoes_lista,'exterior.bairro', exterior.bairro.cdata, 0, '')
                    if 'nmCid' in dir(exterior): validacoes_lista = validar_campo(validacoes_lista,'exterior.nmCid', exterior.nmCid.cdata, 1, '')
                    if 'codPostal' in dir(exterior): validacoes_lista = validar_campo(validacoes_lista,'exterior.codPostal', exterior.codPostal.cdata, 0, '')
   
    if 'dependente' in dir(evtCdBenefIn.beneficiario):
        for dependente in evtCdBenefIn.beneficiario.dependente:
       
            if 'tpDep' in dir(dependente): validacoes_lista = validar_campo(validacoes_lista,'dependente.tpDep', dependente.tpDep.cdata, 1, '')
            if 'nmDep' in dir(dependente): validacoes_lista = validar_campo(validacoes_lista,'dependente.nmDep', dependente.nmDep.cdata, 1, '')
            if 'dtNascto' in dir(dependente): validacoes_lista = validar_campo(validacoes_lista,'dependente.dtNascto', dependente.dtNascto.cdata, 1, '')
            if 'cpfDep' in dir(dependente): validacoes_lista = validar_campo(validacoes_lista,'dependente.cpfDep', dependente.cpfDep.cdata, 0, '')
            if 'sexoDep' in dir(dependente): validacoes_lista = validar_campo(validacoes_lista,'dependente.sexoDep', dependente.sexoDep.cdata, 1, 'M;F')
            if 'depIRRF' in dir(dependente): validacoes_lista = validar_campo(validacoes_lista,'dependente.depIRRF', dependente.depIRRF.cdata, 1, 'S;N')
            if 'incFisMen' in dir(dependente): validacoes_lista = validar_campo(validacoes_lista,'dependente.incFisMen', dependente.incFisMen.cdata, 1, 'S;N')
            if 'depFinsPrev' in dir(dependente): validacoes_lista = validar_campo(validacoes_lista,'dependente.depFinsPrev', dependente.depFinsPrev.cdata, 1, 'S;N')

    return validacoes_lista